
INFO ==========================
	There is another test recorder 
		http://testrecorder.amygdalum.net/index.html
		Get from github and try to see what tests are generated
		
	How to write custom annotations - in case I need
		What if the objects do not have public fields or getters?
		I need just a visitor inserted in all args and all dependencies of args
			will return objectState + name of params for all methods and constructors
		Easy solution - adnotate each class that I want to get the state with an Annotation
	
		We could do like Lombok does and inject some method to give us info about the dependencies
		http://notatube.blogspot.com/2010/12/project-lombok-creating-custom.html
		https://blog.frankel.ch/lombok-reduces-your-boilerplate-code/
		https://www.baeldung.com/java-annotation-processing-builder
		https://blog.frankel.ch/introductory-guide-annotation-processor/
			you can use a maven plugin to run such annotations
		Good Example of generating a class from annotations
			https://iammert.medium.com/annotation-processing-dont-repeat-yourself-generate-your-code-8425e60c6657
		Instrumentation example
			This is how mockito 2 can extend final classes
			https://www.developer.com/design/what-is-java-agent/
		See the sources of Lombok	
			https://github.com/projectlombok/lombok
		

DONE ==========================
	OK - Handle also exceptions thrown by act
		assertThrows(IllegalArgumentException.class, () -> new SampleService().testException(5));
	OK - if it's @Component or not

	OK - if the class has equals or not

	OK - handle arrays
	
	OK - handle ArrayList<>

	OK - the dependencies (also dependencies of dependencies ...)
		keep all dependencies in the test to avoid creation of 2 ObjectCodeGenerator for the same object
	OK - different objects can have common dependencies
		we need a dependency sorter
	OK - why args types are generated as 
			List<Person> arrayList1 and 
		but results as
			List result?
	OK - problem with repeated args

	OK - cache objects per TestGenerator

	OK - Get fields to set from getters and public fields to Optional<>
	
	OK Get constructors and their arguments
	
	OK - a object with an int == 0 will be initialized with NoArgs

	OK - see what happens when the fields are from superclass

	-----

	OK - Object creation for the target object

	OK - if there is a identifiable constructor covering all the fields
			Create with args constructor 

	OK - if there is a NoArg constructor + public fields
		Create with fields 
		
	-----
	
	OK - Refactor factory

	OK - // TODO create this object
		 // Person person = new Person();
		 // person.firstName = "firstName";
		 // person.lastName = "lastName"
		 // person.age = 35;
		 
	------
	
	OK - Create a function that will return the possible name of the setters
		Or that will find the setter Methods for a field name

	OK - if there is a NoArg constructor + all setters
		Create with setters 
		
	OK - Add objectState to context



TODO ==========================
	Objects creation
		handle Enum
		handle HashMap<>
		Calendar
		UUID
		how to differentiate between Float and float for different objects?
		@Component dependencies will be mocked
			first just create the mock
			Intercept calls to all dependent components and create when() calls
				if only one call => intercept with any params
					If n calls => return results in order...
			
	Assert part
		Check expected result
			if returnType != void
				if has equals
					assertEquals(expectedResult, result)
				else (can be done with comments for now)
					solve equality when there is no equals
						Ex: int[] == int[]
					if getters exist
						test with getters
					if public fields exist
						test with public fields
			OK - if returnType == void
				skip checking the equals and skip collecting the result

		Check side effects on target, arguments, any dependencies
			create assertEquals() for all the new values
     
	Demo for Tash, IonutP
	 
	Package and publish locally
	
	Test in a real project
		See what problems appear

	Move all the test classes within the testrecording package
	
	Write tests for all the code
		check coverage again

	Sa citesc de la rus cum sa pregatesc cod pt Git

	
LATER ==========================
    What do I do when some fields cound not be read? Do the same for all generic factories
		1. I could ignore them and consider just the rest of fields
		2. I could go to fallback
		
	Consider field default values for all the generic factories
		Do I need to do something? Think for each of them

	Handle other Java common classes

	Use @Getter(lazy=true) in TestGenerator/TestGeneratorFactory
		@Getter(lazy=true) private final double[] cached = expensive();

	full injection for factories?
		for test have a util that creates the factory
	
	see what happens with the fields static

	test cyclic dependencies after I have other ways of object creation
		I tried with Lombok, but Lombok could not handle it

	Use JavaPoet to generate java code instead of my library

	if needed object initialisation code could be learned from github	
	
	Handle Generics

	there will be a case when the dependencies are circular

	create non-components with factory
	
	
	arrays of arrays
	
	global variables changed - but this is not ok
	
	static fields are not handled yet
	
	Daca mut calculul cazului si al dependin»õelor intr-un pas pregatitor, nu mai am ciclic dep.
	Pot sa fol object creation context
	
	Mai am undeva cyclic dep intre componente?
	
	
	
	

	
