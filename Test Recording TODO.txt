
INFO ==========================
	There is another test recorder 
		http://testrecorder.amygdalum.net/index.html
		Get from github and try to see what tests are generated
		
	How to write custom annotations - in case I need
		What if the objects do not have public fields or getters?
		I need just a visitor inserted in all args and all dependencies of args
			will return objectState + name of params for all methods and constructors
		Easy solution - adnotate each class that I want to get the state with an Annotation
	
		We could do like Lombok does and inject some method to give us info about the dependencies
		http://notatube.blogspot.com/2010/12/project-lombok-creating-custom.html
		https://blog.frankel.ch/lombok-reduces-your-boilerplate-code/
		https://www.baeldung.com/java-annotation-processing-builder
		https://blog.frankel.ch/introductory-guide-annotation-processor/
			you can use a maven plugin to run such annotations
		Good Example of generating a class from annotations
			https://iammert.medium.com/annotation-processing-dont-repeat-yourself-generate-your-code-8425e60c6657
		Instrumentation example
			This is how mockito 2 can extend final classes
			https://www.developer.com/design/what-is-java-agent/
		See the sources of Lombok	
			https://github.com/projectlombok/lombok
		

DONE ==========================
	OK - Handle also exceptions thrown by act
		assertThrows(IllegalArgumentException.class, () -> new SampleService().testException(5));
	OK - if it's @Component or not

	OK - if the class has equals or not

	OK - handle arrays
	
	OK - handle ArrayList<>

	OK - the dependencies (also dependencies of dependencies ...)
		keep all dependencies in the test to avoid creation of 2 ObjectCodeGenerator for the same object
	OK - different objects can have common dependencies
		we need a dependency sorter
	OK - why args types are generated as 
			List<Person> arrayList1 and 
		but results as
			List result?
	OK - problem with repeated args

	OK - cache objects per TestGenerator

	OK - Get fields to set from getters and public fields to Optional<>
	
	OK Get constructors and their arguments
	
	OK - a object with an int == 0 will be initialized with NoArgs

	OK - see what happens when the fields are from superclass

	-----

	OK - Object creation for the target object

	OK - if there is a identifiable constructor covering all the fields
			Create with args constructor 

	OK - if there is a NoArg constructor + public fields
		Create with fields 
		
	OK - Refactor factory

	OK - else
		/* TODO create this object
		Person person = new Person();
		person.firstName = "firstName";
		person.lastName = "lastName"
		person.age = 35;
		*/


TODO ==========================
	ObjectCodeGenerators
		solve equality when there is no equals
			Ex: int[] == int[]
	
		Object creation 
			how to differentiate between Float and float for different objects?
		
		Non-@Component object creation priority
				Known object like primitives and utils first
					https://medium.com/analytics-vidhya/top-10-java-classes-from-utility-package-a4bebde7c267
					handle Enum
					handle HashMap<>
					handle Map<>
				Unknown objects
					Creation priority
						OK - if NoArgs constructor exists and no fields to be set
							Create with NoArgs constructor 
						OK - if Lombok builder exists
							Create with Lombok builder
						OK - if there is a identifiable constructor covering all the fields
							Create with args constructor 
						!!!! - if there is a NoArg constructor + all setters
							Create with setters 
						OK - if there is a NoArg constructor + public fields
							Create with fields 
						OK - else
							/* TODO create this object
							Person person = new Person();
							person.firstName = "firstName";
							person.lastName = "lastName"
							person.age = 35;
							*/
				
		@Component dependencies will be mocked
			Intercept calls to all dependent components and create when() calls
			
	Test Code Generation
		Check expected result
			if returnType != void
				if has equals
					assertEquals(expectedResult, result)
				else 
					if getters exist
						test with getters
					if public fields exist
						test with public fields
			OK - if returnType == void
				skip checking the equals and skip collecting the result

		Check side effects on target, arguments, any dependencies
			create assertEquals() for all the new values
     

	Move all the test classes within the testrecording package
	
	Write tests for all the code
		check coverage again

	Sa citesc de la rus cum sa pregatesc cod pt Git

	
LATER ==========================
	Use @Getter(lazy=true) in TestGenerator/TestGeneratorFactory
		@Getter(lazy=true) private final double[] cached = expensive();

	full injection for factories?
		for test have a util that creates the factory
	
	see what happens with the fields static

	test cyclic dependencies after I have other ways of object creation
		I tried with Lombok, but Lombok could not handle it

	Use JavaPoet to generate java code instead of my library

	if needed object initialisation code could be learned from github	
	
	Handle Generics

	there will be a case when the dependencies are circular

	create non-components with factory
	
	
	arrays of arrays
	
	global variables changed - but this is not ok
	
	static fields are not handled yet
	
	Daca mut calculul cazului si al dependin»õelor intr-un pas pregatitor, nu mai am ciclic dep.
	Pot sa fol object creation context
	
	Mai am undeva cyclic dep intre componente?
	
	
	
	

	
