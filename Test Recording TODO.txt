
INFO =============
	There is another test recorder 
		http://testrecorder.amygdalum.net/index.html
		Get from github and try to see what tests are generated
		

	OK - Handle also exceptions thrown by act
		assertThrows(IllegalArgumentException.class, () -> new SampleService().testException(5));
	OK - if it's @Component or not

	OK - if the class has equals or not


TODO =============
	ObjectCodeGenerators
		To create an object we must know
			Add an enum specifying the destination of an object
				Target - this should not be mocked
				MethodArgument - argument of the method call
				ExpectedResult
				Dependency - dependency of the target, arguments or expected result
				Warning: An object can be MethodArgument + Dependency, or ExpectedResult + Argument
		
			the objects it depends on (from builder, setters, constructor)
			also dependencies of dependencies. etc
			keep all dependencies in the test to avoid creation of 2 ObjectCodeGenerator for the same object
			n objects can have common dependencies
				we need a dependency sorter
				
			Non-@Component object creation priority
					Known object like primitives and utils first
						https://medium.com/analytics-vidhya/top-10-java-classes-from-utility-package-a4bebde7c267
						add arrays
						add ArrayList<>
						add HashMap<>
						add Map<>
					Get fields to set from getters and public fields
						Create with NoArgs constructor if NoArgs constructor exists and no fields to be set
						OK - Create with Lombok builder
						Create with args constructor if there is a identifiable constructor covering all the fields
						Create with setters if there is a NoArg constructor + all setters
						Create with fields if there is a NoArg constructor + public fields
						Cannot create => write some comments explaining and write in the comments the fields values to set
					
			@Component dependencies will be mocked
				Intercept calls to all dependent components and create when() calls
			
    Test Code Generation
		Check expected result
			if returnType != void
				if has equals
					assertEquals(expectedResult, result)
				else 
					if getters exist
						test with getters
					if public fields exist
						test with public fields
			if returnType == void
				skip checking the equals

		Check side effects on target, arguments, any dependencies
			create assertEquals() for all the new values
     
	
LATER =============
	if needed object initialisation code could be learned from github	
	
	http://tutorials.jenkov.com/java-reflection/private-fields-and-methods.html
	
	Handle Generics

	there will be a case when the dependencies are circular

	create non-components with factory


	
	
